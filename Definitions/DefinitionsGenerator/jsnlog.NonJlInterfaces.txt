	interface JSNLogOptions {
		enabled?: boolean;
		maxMessages?: number;
		defaultAjaxUrl?: string;
		clientIP?: string;
		requestId?: string;
		defaultBeforeSend?: (xhr: XMLHttpRequest) => void;
		serialize?: (object: any) => string;
		traceContextProvider?: () => JSNLogLoggerTraceContext;
	}

	interface JSNLogLoggerTraceContext {
		traceId: string;
		spanId: string;
		parentSpanId?: string;
	}

	interface JSNLogFilterOptions {
		level?: number;
		ipRegex?: string;
		userAgentRegex?: string;
		disallow?: string;
	}

	interface JSNLogLoggerOptions extends JSNLogFilterOptions {
		appenders?: JSNLogAppender[];
		onceOnly?: string[];
	}

	// Base for all appender options types
	interface JSNLogAppenderOptions extends JSNLogFilterOptions {
		sendWithBufferLevel?: number;
		storeInBufferLevel?: number;
		bufferSize?: number;
		batchSize?: number;
		maxBatchSize?: number;
		batchTimeout?: number;
		sendTimeout?: number;
	}

	interface JSNLogAjaxAppenderOptions extends JSNLogAppenderOptions {
		url?: string;
		beforeSend?: (xhr: XMLHttpRequest, json: any) => void;
	}

	interface JSNLogLogger {
		setOptions(options: JSNLogLoggerOptions): JSNLogLogger;

		trace(logObject: any): JSNLogLogger;
		debug(logObject: any): JSNLogLogger;
		info(logObject: any): JSNLogLogger;
		warn(logObject: any): JSNLogLogger;
		error(logObject: any): JSNLogLogger;
		fatal(logObject: any): JSNLogLogger;
		fatalException(logObject: any, e: any): JSNLogLogger;
		log(level: number, logObject: any, e?: any): JSNLogLogger;
	}

    // setOptions and sendBatch have to be optional, so you can use a Winston transport as
    // as a JSNLogAppender
	interface JSNLogAppender {
		setOptions?: (options: JSNLogAppenderOptions) => JSNLogAppender;
        sendBatch?: () => void;
	}

	interface JSNLogAjaxAppender extends JSNLogAppender {
		setOptions?: (options: JSNLogAjaxAppenderOptions) => JSNLogAjaxAppender;
	}

	interface JSNLogConsoleAppender extends JSNLogAppender {
	}
